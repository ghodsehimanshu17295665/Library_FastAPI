"""add new models or fields

Revision ID: e00c946f57ea
Revises: 5461eb1feaa0
Create Date: 2025-05-15 09:11:47.004886

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e00c946f57ea'
down_revision: Union[str, None] = '5461eb1feaa0'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # 1. Drop the foreign key from issued_books that references students
    op.drop_constraint('issued_books_student_id_fkey', 'issued_books', type_='foreignkey')

    # 2. Drop the students table (now safe to do this)
    op.drop_table('students')

    # 3. Create the new users table
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('role', sa.Enum('ADMIN', 'STUDENT', name='userroleenum'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('enroll_number', sa.String(length=30), nullable=True),
    sa.Column('mobile_number', sa.String(length=15), nullable=True),
    sa.Column('gender', sa.Enum('MALE', 'FEMALE', 'OTHER', name='genderenum'), nullable=True),
    sa.Column('course_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('enroll_number')
    )
    # 4. Other changes
    op.alter_column('books', 'publication_date',
        existing_type=postgresql.TIMESTAMP(),
        nullable=True
    )
    op.create_unique_constraint(None, 'categories', ['name'])
    op.alter_column('fines', 'issued_book_id',
        existing_type=sa.UUID(),
        nullable=False
    )
    op.alter_column('issued_books', 'is_returned',
        existing_type=sa.BOOLEAN(),
        nullable=False
    )

    # 5. Create the new foreign key to the users table
    op.create_foreign_key(None, 'issued_books', 'users', ['student_id'], ['id'])

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'issued_books', type_='foreignkey')
    op.create_foreign_key('issued_books_student_id_fkey', 'issued_books', 'students', ['student_id'], ['id'])
    op.alter_column('issued_books', 'is_returned',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('fines', 'issued_book_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_constraint(None, 'categories', type_='unique')
    op.alter_column('books', 'publication_date',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_table('students',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('enroll_number', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('mobile_number', sa.VARCHAR(length=15), autoincrement=False, nullable=False),
    sa.Column('gender', postgresql.ENUM('Male', 'Female', 'Other', name='gender_enum'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('course_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], name='students_course_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='students_pkey'),
    sa.UniqueConstraint('email', name='students_email_key'),
    sa.UniqueConstraint('enroll_number', name='students_enroll_number_key')
    )
    op.drop_table('users')
    # ### end Alembic commands ###
